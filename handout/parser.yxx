/* Infix notation calculator.  */
%{
  // #include <math.h>
  // #include <stdio.h>
  #include <iostream>
  using std::cout;
  using std::cin;
  int yylex (void);
  void yyerror (char const *);
%}
/* Bison declarations.  */
%define api.value.type {double}
%token NUM
// %token T_plus
// %token T_int
%token void
%token string
%token bool
%token int
%token double
%token null
%token true
%token false
%token class
%token extends
%token interface
%token implements
%token this
%token while
%token if
%token else
%token for
%token return
%token break
%token Print
%token ReadInteger
%token ReadLine
%token NewArray
%token New
%token add
%token minus
%token mul
%token div
%token mod
%token less
%token less_eq
%token greater
%token greater_eq
%token assign
%token eq
%token not_eq
%token and
%token or
%token not
%token semicolon
%token comma
%token dot
%token square_bra
%token square_ket
%token round_bra
%token round_ket
%token curly_bra
%token curly_ket

// %left '-' '+'
// %left '*' '/'
// %precedence NEG   /* negation--unary minus */
// %right '^'        /* exponentiation */
%% /* The grammar follows.  */
input:
  %empty
| input line
;
line:
  '\n'
| exp '\n'  { printf ("\t%.10g\n", $1); }
;
exp:
  T_int                { $$ = $1;           }
| exp T_plus T_int        { $$ = $1 + $3;      }
;
// | exp T_minux exp        { $$ = $1 - $3;      }
// | exp T_multiply exp        { $$ = $1 * $3;      }
// | exp T_divide exp        { $$ = $1 / $3;      }
// | T_minux exp  %prec NEG { $$ = -$2;          }
// | T_round_bra exp T_round_ket        { $$ = $2;      }
%%
// int main(){
//   yyparse();
// }