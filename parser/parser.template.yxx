/* Infix notation calculator.  */
%{
  // #include <math.h>
  // #include <stdio.h>
  #include <iostream>
  #include "common.h"
  using std::cout;
  using std::cin;
  int yylex (void);
  void yyerror (char const *);
%}
%define api.value.type {node_ptr_t}
/* Bison declarations.  */
// %union {
//   double value_double;
//   Fuck value_int;
// }

%token END_OF_FILE 0
%token T_real
%token T_int
%token REAL
%token ID
@#token_list#@

%% /* The grammar follows.  */
input:
  %empty
| line input 
;

line:
  T_semicolon
| exp T_semicolon  { 
    // printf ("\t$%.10g\n", $1); 
  }
;
exp:
  num                   { $$ = std::move($1);     }
| exp T_plus num        { $$ = std::move($1);     }
;
num:
  T_real { $$=std::move(yylval); }
| T_int  { $$=std::move(yylval); }
;

%%

int main(){
  yyparse();
}