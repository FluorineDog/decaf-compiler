/* Infix notation calculator.  */
%{
  // #include <math.h>
  // #include <stdio.h>
  #include <iostream>
  #include "common.h"
  using std::cout;
  using std::cin;
  int yylex (void);
  void yyerror (char const *);
%}
%define api.value.type {node_ptr_t}
/* Bison declarations.  */
// %union {
//   double value_double;
//   Fuck value_int;
// }

%token END_OF_FILE 0
%token T_real
%token T_integer
%token REAL
%token ID
@#token_list#@

%% /* The grammar follows.  */
input:
  %empty     {$$ = make_shared<Block>();}
| input line {$$ = $1; $1.stmts.emplace_back($2);}
;

line:
  T_semicolon {$$ = nullptr}
| exp T_semicolon  { 
    // printf ("\t$%.10g\n", $1); 
  }
;
exp:
  num                   { $$ = $1;     }
| exp T_plus num        { $$ = make_shared<Expr>($1, T_plus, $3);}
;
num:
  T_real { $$=yylval; }
| T_integer  { $$=yylval; }
;

%%

int main(){
  yyparse();
}