/* Infix notation calculator.  */
%code top{
  // #include <math.h>
  // #include <stdio.h>
  #include <iostream>
  using std::cout;
  using std::cin;
}
%code requires{
  #include "common.h"
}
%code{
  int yylex (void);
  void yyerror (char const *);
  node_ptr_t root;
}


%define api.value.type {node_ptr_t}
/* Bison declarations.  */
// %union {
//   double value_double;
//   Fuck value_int;
// }

%token END_OF_FILE 0
%token NUM_double
%token NUM_int
%token ID
@#token_list#@

%% /* The grammar follows.  */
input:
  %empty 
| input Decl 
;

Decl:
  VariableDecl
| FuncitionDecl
| ClassDecl
| InterfaceDecl
;

VariableDecl:
  Variable ';'
;

Variable:
  Type ID
;

Type:
  T_int 
| T_double 
| T_bool 
| T_string
| ID
| Type []
;

TypeVoid:
  Type
| T_void
;

FunctionDecl:
  TypeVoid ID '(' Formals ')' StmtBlock
;

Formals:
  %empty
| Variable {}
| Variable ',' {} Formals
;

ClassDecl:
  T_class ID Extends Implements
;

Extends:
  %empty
| T_extends ID
;

Implements:
  %empty

| Implements, T_implements 
;

%%

int main(){
  yyparse();
  PrintVisitor v;
  root->accept(v);
}
