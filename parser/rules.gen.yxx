DeclList:
  Decl
| DeclList Decl
;

Program:
  DeclList
;

ident:
  ID
;

type_ident:
  TYPE_ID
;

Decl:
  VariableDecl
| FunctionDecl
| ClassDecl
| InterfaceDecl
;

VariableDecl:
  Variable ';'
;

Variable:
  Type ident
;

Type:
  T_int
| T_double
| T_bool
| T_string
| type_ident
| Type '[' ']'
;

FunctionDecl:
  Type ident '(' Formals ')' StmtBlock
| T_void ident '(' Formals ')' StmtBlock
;

VariableCommaList:
  Variable
| VariableCommaList ',' Variable
;

VariableCommaListOptional:
  %empty
| VariableCommaList
;

Formals:
  VariableCommaListOptional
;

ExtenderOptional:
  %empty
| Extender
;

ImplementorOptional:
  %empty
| Implementor
;

FieldList:
  Field
| FieldList Field
;

FieldListOptional:
  %empty
| FieldList
;

ClassDecl:
  T_class type_ident ExtenderOptional ImplementorOptional '{' FieldListOptional '}'
;

Extender:
  T_extends type_ident
;

type_identOptional:
  %empty
| type_ident
;

Implementor:
  T_implements type_identOptional
;

Field:
  VariableDecl
| FunctionDecl
;

PrototypeList:
  Prototype
| PrototypeList Prototype
;

PrototypeListOptional:
  %empty
| PrototypeList
;

InterfaceDecl:
  T_interface type_ident '{' PrototypeListOptional '}'
;

Prototype:
  Type ident '(' Formals ')'
| T_void ident '(' Formals ')'
;

StmtList:
  Stmt
| StmtList Stmt
;

StmtListOptional:
  %empty
| StmtList
;

StmtBlock:
  '{' StmtListOptional '}'
;

ExprOptional:
  %empty
| Expr
;

Stmt:
  ExprOptional ';'
| IfStmt
| WhileStmt
| ForStmt
| BreakStmt
| ReturnStmt
| PrintStmt
| StmtBlock
| VariableDecl
;

ElseTailOptional:
  %empty
| ElseTail
;

IfStmt:
  T_if '(' Expr ')' Stmt ElseTailOptional
;

ElseTail:
  T_else Stmt
;

WhileStmt:
  T_while '(' Expr ')' Stmt
;

ForStmt:
  T_for '(' ExprOptional ';' Expr ';' ExprOptional ')' Stmt
;

ReturnStmt:
  T_return ExprOptional ';'
;

BreakStmt:
  T_break ';'
;

ExprCommaList:
  Expr
| ExprCommaList ',' Expr
;

PrintStmt:
  T_Print '(' ExprCommaList ')' ';'
;

Expr:
  Constant
| LValue
| T_this
| Call
| '(' Expr ')'
| T_ReadInteger '(' ')'
| T_ReadLine '(' ')'
| T_New ident
| T_NewArray '(' Expr ',' Type ')'
;

LValue:
  ident
| Expr '.' ident
| Expr '[' Expr ']'
;

Call:
  ident '(' Actuals ')'
| Expr '.' ident '(' Actuals ')'
;

ExprCommaListOptional:
  %empty
| ExprCommaList
;

Actuals:
  ExprCommaListOptional
;

Constant:
  NUM_int
| NUM_double
| T_null
;

