%%
DeclList:
  Decl                       {$$ = mkList(); ($$)->list.push_back($1);  }
| DeclList Decl              {$$ = $1; ($$)->list.push_back($2); }       
;

Program:
  DeclList                   {$$ = mkProgram($1);}
;

ident:
  ID                         {$$ = $1;}
;

type_ident:
  TYPE_ID                    {$$ = $1;}
;

Decl:
  VariableDecl               {$$ = $1;}
| FunctionDecl               {$$ = $1;}
| ClassDecl                  {$$ = $1;}
| InterfaceDecl              {$$ = $1;}
;

VariableDecl:
  Variable ';'               {$$ = $1;}
;

Variable:
  Type ident                 {$$ = mkTypedVariable($1, $2);}
;

TypeBase:
  T_int                      {$$ = mkTypeBase(T_int);}
| T_double                   {$$ = mkTypeBase(T_double);}
| T_bool                     {$$ = mkTypeBase(T_bool);}
| T_string                   {$$ = mkTypeBase(T_string);}
;

Type:
  TypeBase                   {$$ = $1;}
| type_ident                 {$$ = $1;}
| Type '[' ']'               {$$ = mkTypeArray($1);}
;

FunctionDecl:
  Type ident '(' Formals ')' StmtBlock      {$$ = mkFunctionDecl($1, $2, $4, $6);}
| T_void ident '(' Formals ')' StmtBlock    {$$ = mkFunctionDecl(mkTypeBase(T_void), $2, $4, $6);}
;

VariableCommaList:
  Variable                           {$$ = mkList(); ($$)->list.push_back($1);  }
| VariableCommaList ',' Variable     {$$ = $1; ($$)->list.push_back($3); }       
;

VariableCommaListOptional:
  %empty                     {$$ = mkList();}
| VariableCommaList          {$$ = $1;}
;

Formals:
  VariableCommaListOptional     {$$ = $1;}
;

ExtenderOptional:
  %empty                     {$$ = nullptr;}
| Extender                   {$$ = $1;}
;

ImplementorOptional:
  %empty                     {$$ = mkList();}
| Implementor                {$$ = $1;}
;

FieldList:
  Field                      {$$ = mkList(); ($$)->list.push_back($1);  }
| FieldList Field            {$$ = $1; ($$)->list.push_back($2); }       
;

FieldListOptional:
  %empty                     {$$ = mkList();}
| FieldList                  {$$ = $1;}
;

ClassDecl:
  T_class type_ident ExtenderOptional ImplementorOptional '{' FieldListOptional '}' {
    auto extender = $3 ? optional_node_ptr_t($3) : std::nullopt;
    $$ = mkClassDecl($2, extender, $4, $6);
    }
;

Extender:
  T_extends type_ident       {$$ = $2;}
;

type_identList:
  type_ident                    {$$ = mkList(); ($$)->list.push_back($1); }
| type_identList type_ident     {$$ = $1; ($$)->list.push_back($2); }
;

Implementor:
  T_implements type_identList     {$$ = $2;}
;

Field:
  VariableDecl               {$$ = $1;}
| FunctionDecl               {$$ = $1;}
;

PrototypeList:
  Prototype                   {$$ = mkList(); ($$)->list.push_back($1);  }
| PrototypeList Prototype     {$$ = $1; ($$)->list.push_back($2); }       
;

PrototypeListOptional:
  %empty                     {$$ = mkList();}
| PrototypeList              {$$ = $1;}
;

InterfaceDecl:
  T_interface type_ident '{' PrototypeListOptional '}'     {$$ = mkInterface($2, $4);}
;

Prototype:
  Type ident '(' Formals ')' ';'      {$$ = mkPrototype($1, $2, $4);}
| T_void ident '(' Formals ')' ';'    {$$ = mkPrototype(mkTypeBase(T_void), $2, $4);}
;

StmtList:
  Stmt                       {$$ = mkList(); ($$)->list.push_back($1);  }  
| StmtList Stmt              {$$ = $1; ($$)->list.push_back($2); }         
;

StmtListOptional:
  %empty                     {$$ = mkList();}
| StmtList                   {$$ = $1;}
;

StmtBlock:
  '{' StmtListOptional '}'     {$$ = mkBlock($2);}
;

ExprOptional:
  %empty                     {$$ = mkNoAction();}
| Expr                       {$$ = $1;}
;

Stmt:
  ExprOptional ';'           {$$ = $1;}
| IfStmt                     {$$ = mkBlock($1);}
| WhileStmt                  {$$ = mkBlock($1);}
| ForStmt                    {$$ = mkBlock($1);}
| BreakStmt                  {$$ = $1;}
| ReturnStmt                 {$$ = $1;}
| PrintStmt                  {$$ = $1;}
| StmtBlock                  {$$ = $1;}
| VariableDecl               {$$ = $1;}
;

ElseTailOptional:
  %empty                     {$$ = mkNoAction();}
| ElseTail                   {$$ = $1;}
;

IfStmt:
  T_if '(' Expr ')' Stmt ElseTailOptional     { $$ = mkIf($3, $5, $6);}
;

ElseTail:
  T_else Stmt                {$$ = $2;}
;

WhileStmt:
  T_while '(' Expr ')' Stmt     {$$ = mkWhile($3, $5);}
;

ForStmt:
  T_for '(' ExprOptional ';' Expr ';' ExprOptional ')' Stmt     { $$ = mkFor($3, $5, $7, $9);}
;

ReturnStmt:
  T_return ExprOptional ';'     { $$ = mkReturn($2); }
;

BreakStmt:
  T_break ';'                { $$ = mkBreak();}
;

ExprCommaList:
  Expr                       { $$ = mkList(); ($$)->list.push_back($1);  }
| ExprCommaList ',' Expr     { $$ = $1; ($$)->list.push_back($3); }
;

PrintStmt:
  T_Print '(' ExprCommaList ')' ';'     {$$ = mkPrint($3);}
;

Expr:
  LValue '=' Expr            {$$ = mkAssign($1, $3);}
| Constant                   {$$ = $1;}
| LValue                     {$$ = $1;}
| T_this                     {$$ = mkThis();}
| Call                       {$$ = $1;}
| '(' Expr ')'               {$$ = $2;}
| Expr '+' Expr              {$$ = mkBinaryExpr($1, '+', $3);}
| Expr '-' Expr              {$$ = mkBinaryExpr($1, '-', $3);}
| Expr '*' Expr              {$$ = mkBinaryExpr($1, '*', $3);}
| Expr '/' Expr              {$$ = mkBinaryExpr($1, '/', $3);}
| Expr '%' Expr              {$$ = mkBinaryExpr($1, '%', $3);}
| '-' Expr                   {$$ = mkUnaryExpr('-', $2);}
| Expr '<'          Expr     {$$ = mkBinaryExpr($1, '<'         , $3);}
| Expr T_less_eq    Expr     {$$ = mkBinaryExpr($1, T_less_eq   , $3);}
| Expr '>'          Expr     {$$ = mkBinaryExpr($1, '>'         , $3);}
| Expr T_greater_eq Expr     {$$ = mkBinaryExpr($1, T_greater_eq, $3);}
| Expr T_eq         Expr     {$$ = mkBinaryExpr($1, T_eq        , $3);}
| Expr T_not_eq     Expr     {$$ = mkBinaryExpr($1, T_not_eq    , $3);}
| Expr T_and        Expr     {$$ = mkBinaryExpr($1, T_and       , $3);}
| Expr T_or         Expr     {$$ = mkBinaryExpr($1, T_or        , $3);}
| '!' Expr                   {$$ = mkUnaryExpr('!', $2);}
| T_ReadInteger '(' ')'      {$$ = mkRead(T_ReadInteger);}
| T_ReadLine '(' ')'         {$$ = mkRead(T_ReadLine);}
| T_New type_ident           {$$ = mkNew($2);}
| T_NewArray '(' Expr ',' Type ')'     {$$ = mkNewArray($3, $5);}
;

LValue:
  ident                      {$$ = $1;}
| Expr '.' ident             {$$ = mkMemberDot($1, $3);}
| Expr '[' Expr ']'          {$$ = mkIndex($1, $3);}
;

Call:
  ident '(' Actuals ')'      {$$ = mkCall(std::nullopt, $1, $3);}
| Expr '.' ident '(' Actuals ')'     {$$ = mkCall($1, $3, $5);}
;

ExprCommaListOptional:
  %empty                     {$$ = mkList();}
| ExprCommaList              {$$ = $1;}
;

Actuals:
  ExprCommaListOptional      {$$ = $1;}
;

Constant:
  NUM_int                    {$$ = $1;}
| NUM_double                 {$$ = $1; }
| T_null                     {$$ = mkNullPointer();}
;
%%
